#{
    ~label 'x' 0x1
    ~label 'y' 0x2
    ~label 'z' 0x3
    ~label 'ln' 0x0A
	~label 'buf' 0x8
}

.mva &(0x5) &(0xF) <| $(0x0)
; load values
.ldi &(![~x]) <| $(0x1)
.ldi &(![~y]) <| $(0x2)
.ldi &(![~z]) <| $(0x5)


; print info
.lpstr !{"Vector values:"}
.unlock &(![~buf]) str
.mvx &(0x1) &(0x6) |> &(![~buf])
.mva &(0x1) &(0x6) <| $(0x0A)

.mvj &(0x1) &(0x6) <| @string_t("x: ")
.mvx &(0x1) &(0x6) |> &(![~x])
.mva &(0x1) &(0x6) <| $(![~ln])

.mvj &(0x1) &(0x6) <| @string_t("y: ")
.mvx &(0x1) &(0x6) |> &(![~y])
.mva &(0x1) &(0x6) <| $(![~ln])

.mvj &(0x1) &(0x6) <| @string_t("z: ")
.mvx &(0x1) &(0x6) |> &(![~z])
.mva &(0x1) &(0x6) <| $(![~ln])


; normalize vector
.add &(0x4) &(0x1) &(0x2)
.swap &(0x4) &(0x2)
.add &(0x4) &(0x2) &(0x3)
.swap &(0x4) &(0x5)
.sqrt &(0x4) &(0x5)

; result
.mvj &(0x1) &(0x6) <| @string_t("Normalize value: ")
.mvx &(0x1) &(0x6) |> &(0x4)
.mva &(0x1) &(0x6) <| $(0x20)
; stage
.mva &(0x1) &(0x7) <| $(0x0)
; clear
.mva &(0x1) &(0x3) <| $(0x0)
; shutdown
.halt